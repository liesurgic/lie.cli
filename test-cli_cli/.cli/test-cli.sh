#!/bin/zsh

# Module: test-cli
# Generated by lie CLI Framework

LIE_HOME="${LIE_HOME:-$HOME/.lie}"
source "$LIE_HOME/utils/common.sh"

MODULE_NAME="test-cli"
MODULE_VERSION="1.0.0"
MODULE_DESCRIPTION="CLI module for test-cli"

# Source user commands
CLI_DIR="$(dirname "$0")"
source "$CLI_DIR/commands.sh"

show_help() {
    echo -e "${BLUE}$MODULE_NAME v$MODULE_VERSION${NC}"
    echo "Description: $MODULE_DESCRIPTION"
    echo ""
    echo "Usage: lie $MODULE_NAME <subcommand>"
    echo ""
    echo "Subcommands:"
    
    # Show built-in subcommands
    echo "  help     Show this help message"
    echo "  status   Show status information"
    
    # Show custom subcommands from commands.sh
    local commands_file="$CLI_DIR/commands.sh"
    if [ -f "$commands_file" ]; then
        # Extract function names from commands.sh
        grep "^[a-zA-Z_][a-zA-Z0-9_]*()" "$commands_file" | sed 's/() {.*//' | while read -r func; do
            echo "  $func"
        done
    fi
}

show_status() {
    echo -e "${BLUE}Status for $MODULE_NAME${NC}"
    echo "Module: $MODULE_NAME"
    echo "Version: $MODULE_VERSION"
    echo "Commands file: $CLI_DIR/commands.sh"
    echo ""
    echo "Available subcommands:"
    
    # Show built-in subcommands
    echo "  - help"
    echo "  - status"
    
    # Show custom subcommands
    local commands_file="$CLI_DIR/commands.sh"
    if [ -f "$commands_file" ]; then
        grep "^[a-zA-Z_][a-zA-Z0-9_]*()" "$commands_file" | sed 's/() {.*//' | while read -r func; do
            echo "  - $func"
        done
    fi
}

execute_subcommand() {
    local subcommand="$1"
    shift
    
    case $subcommand in
        help|--help|-h)
            show_help
            ;;
        status)
            show_status
            ;;
        *)
            # Check if function exists in commands.sh
            if type "$subcommand" 2>/dev/null | grep -q "function"; then
                # Execute the function with remaining arguments
                "$subcommand" "$@"
            else
                echo -e "${RED}Error: Unknown subcommand '$subcommand'${NC}"
                echo ""
                show_help
                exit 1
            fi
            ;;
    esac
}

main() {
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi
    
    execute_subcommand "$@"
}

main "$@"
